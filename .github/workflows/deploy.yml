name: Build and Deploy

on:
    push:
      branches:
        - main
        - '**'

    workflow_dispatch: # Allow manual triggers

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Shallow clone for faster checkout
          fetch-depth: 1

  setup:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, pdo, bcmath, json, xml, zip
          coverage: none

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --prefer-dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

          # Specifies non-default lock file location
          cache-dependency-path: './src/package-lock.json'

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Install NPM dependencies & build assets
        env:
          NODE_ENV: production
        run: |
          npm ci
          node node_modules/vite/bin/vite.js build

  package:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create deployment package
        run: |
          TIMESTAMP="$(date +%Y-%m-%d-%H-%M-%S)"
          cd ..
          tar -czf "deploy-${TIMESTAMP}.tar.gz" \
            --exclude='node_modules' \
            --exclude='.git*' \
            --exclude='tests' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='.env*' \
            --exclude='phpunit.xml' \
            --exclude='*/.editorconfig' \
            src/

          # Verify archive
          if [ ! -s "deploy-${TIMESTAMP}.tar.gz" ]; then
            echo "Error: Empty archive created"
            exit 1
          fi

          mv "deploy-${TIMESTAMP}.tar.gz" src/

  deploy:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Copy deployment package and script
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "src/deploy-*.tar.gz,.github/workflows/deploy-to-prod.sh"
          target: "~/deployments/"
          strip_components: 1
          overwrite: true

      - name: Unpack and finalize
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            chmod +x ~/deployments/workflows/deploy-to-prod.sh
            ~/deployments/workflows/deploy-to-prod.sh
