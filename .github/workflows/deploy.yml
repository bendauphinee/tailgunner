name: Build and Deploy

on:
    push:
      branches:
        - main
        - '**'
    workflow_dispatch:  # Allow manual triggers

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Tailgunner Production

    defaults:
      run:
        working-directory: ./src

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, pdo, bcmath, json, xml, zip
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './src/package-lock.json'

      - name: Install Composer Dependencies
        run: composer install --no-dev --optimize-autoloader --prefer-dist

      - name: Install NPM Dependencies & Build Assets
        env:
          VITE_APP_NAME: Tailgunner
          VITE_APP_URL: https://tailgunner.app
          NODE_ENV: production
        working-directory: ./src
        run: |
          # Setup environment variables
          echo "VITE_APP_ADDRESS=$VITE_APP_URL" >> .env
          echo "VITE_APP_NAME=$VITE_APP_NAME" >> .env

          rm -rf node_modules package-lock.json
          npm install
          node node_modules/vite/bin/vite.js build

          rm .env

      - name: Create Deployment Package
        run: |
          TIMESTAMP="$(date +%Y-%m-%d-%H-%M-%S)"
          cd ..
          tar -czf "deploy-${TIMESTAMP}.tar.gz" \
            --exclude='node_modules' \
            --exclude='.git*' \
            --exclude='tests' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            src/
          mv "deploy-${TIMESTAMP}.tar.gz" src/

      - name: Copy deployment package
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "src/deploy-*.tar.gz"
          target: "~/deployments/"
          strip_components: 1

      - name: Unpack and finalize
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            BASE_DEPLOY_PATH=~/deployments
            TARBALL="$(ls -1t ${BASE_DEPLOY_PATH}/deploy-*.tar.gz | head -n1)"
            TIMESTAMP="$(basename "$TARBALL" | sed -E 's/.*deploy-(.+)\.tar\.gz/\1/g')"
            BASE_RELEASE_PATH=~/deployments/releases
            RELEASE_PATH=${BASE_RELEASE_PATH}/${TIMESTAMP}

            # Create release directory and extract files
            mkdir -p ${RELEASE_PATH}
            tar -xzf "$TARBALL" -C ${RELEASE_PATH}

            # Remove and link storage directory
            rm -Rf ${RELEASE_PATH}/src/storage
            ln -s ~/shared/storage ${RELEASE_PATH}/src/storage
            ln -s ~/shared/.env ${RELEASE_PATH}/src/.env

            # Refresh Laravel caches
            cd ${RELEASE_PATH}/src
            php artisan config:clear || exit 1
            php artisan route:cache || exit 1
            php artisan view:cache || exit 1
            php artisan storage:link || exit 1

            # Run migrations
            php artisan migrate --force || exit 1

            # Relink the release directory
            ln -sfn ${RELEASE_PATH}/src ~/public_html

            # Cleanup old releases and tarballs (keep last 5 of each)
            echo "Cleaning up old tarballs..."
            cd ${BASE_DEPLOY_PATH}
            ls -1t deploy-*.tar.gz | tail -n +6 | xargs -d '\n' rm -f -- 2>/dev/null || true

            echo "Cleaning up old release directories..."
            cd ${BASE_RELEASE_PATH}
            ls -1dt */ | tail -n +6 | xargs -d '\n' rm -rf -- 2>/dev/null || true

            echo "Deployment cleanup completed."
